/*
 * Mistral AI API
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.arhs.ai.poc.mistral.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.jackson.nullable.JsonNullable;

import java.util.Arrays;
import java.util.Objects;
import java.util.UUID;

/**
 * FileSchema
 */
@JsonPropertyOrder({
  FileSchema.JSON_PROPERTY_ID,
  FileSchema.JSON_PROPERTY_OBJECT,
  FileSchema.JSON_PROPERTY_BYTES,
  FileSchema.JSON_PROPERTY_CREATED_AT,
  FileSchema.JSON_PROPERTY_FILENAME,
  FileSchema.JSON_PROPERTY_PURPOSE,
  FileSchema.JSON_PROPERTY_SAMPLE_TYPE,
  FileSchema.JSON_PROPERTY_NUM_LINES,
  FileSchema.JSON_PROPERTY_SOURCE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-05T14:53:13.544788800+01:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class FileSchema {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_OBJECT = "object";
  @jakarta.annotation.Nonnull
  private String _object;

  public static final String JSON_PROPERTY_BYTES = "bytes";
  @jakarta.annotation.Nonnull
  private Integer bytes;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  @jakarta.annotation.Nonnull
  private Integer createdAt;

  public static final String JSON_PROPERTY_FILENAME = "filename";
  @jakarta.annotation.Nonnull
  private String filename;

  public static final String JSON_PROPERTY_PURPOSE = "purpose";
  @jakarta.annotation.Nonnull
  private FilePurpose purpose;

  public static final String JSON_PROPERTY_SAMPLE_TYPE = "sample_type";
  @jakarta.annotation.Nonnull
  private SampleType sampleType;

  public static final String JSON_PROPERTY_NUM_LINES = "num_lines";
  @jakarta.annotation.Nullable
  private JsonNullable<Integer> numLines = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_SOURCE = "source";
  @jakarta.annotation.Nonnull
  private Source source;

  public FileSchema() {
  }

  public FileSchema id(@jakarta.annotation.Nonnull UUID id) {
    
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the file.
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull UUID id) {
    this.id = id;
  }

  public FileSchema _object(@jakarta.annotation.Nonnull String _object) {
    
    this._object = _object;
    return this;
  }

  /**
   * The object type, which is always \&quot;file\&quot;.
   * @return _object
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getObject() {
    return _object;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObject(@jakarta.annotation.Nonnull String _object) {
    this._object = _object;
  }

  public FileSchema bytes(@jakarta.annotation.Nonnull Integer bytes) {
    
    this.bytes = bytes;
    return this;
  }

  /**
   * The size of the file, in bytes.
   * @return bytes
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBytes() {
    return bytes;
  }


  @JsonProperty(JSON_PROPERTY_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBytes(@jakarta.annotation.Nonnull Integer bytes) {
    this.bytes = bytes;
  }

  public FileSchema createdAt(@jakarta.annotation.Nonnull Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The UNIX timestamp (in seconds) of the event.
   * @return createdAt
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@jakarta.annotation.Nonnull Integer createdAt) {
    this.createdAt = createdAt;
  }

  public FileSchema filename(@jakarta.annotation.Nonnull String filename) {
    
    this.filename = filename;
    return this;
  }

  /**
   * The name of the uploaded file.
   * @return filename
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILENAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFilename() {
    return filename;
  }


  @JsonProperty(JSON_PROPERTY_FILENAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilename(@jakarta.annotation.Nonnull String filename) {
    this.filename = filename;
  }

  public FileSchema purpose(@jakarta.annotation.Nonnull FilePurpose purpose) {
    
    this.purpose = purpose;
    return this;
  }

  /**
   * Get purpose
   * @return purpose
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PURPOSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FilePurpose getPurpose() {
    return purpose;
  }


  @JsonProperty(JSON_PROPERTY_PURPOSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPurpose(@jakarta.annotation.Nonnull FilePurpose purpose) {
    this.purpose = purpose;
  }

  public FileSchema sampleType(@jakarta.annotation.Nonnull SampleType sampleType) {
    
    this.sampleType = sampleType;
    return this;
  }

  /**
   * Get sampleType
   * @return sampleType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SAMPLE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SampleType getSampleType() {
    return sampleType;
  }


  @JsonProperty(JSON_PROPERTY_SAMPLE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSampleType(@jakarta.annotation.Nonnull SampleType sampleType) {
    this.sampleType = sampleType;
  }

  public FileSchema numLines(@jakarta.annotation.Nullable Integer numLines) {
    this.numLines = JsonNullable.<Integer>of(numLines);
    
    return this;
  }

  /**
   * Get numLines
   * @return numLines
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Integer getNumLines() {
        return numLines.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NUM_LINES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getNumLines_JsonNullable() {
    return numLines;
  }
  
  @JsonProperty(JSON_PROPERTY_NUM_LINES)
  public void setNumLines_JsonNullable(JsonNullable<Integer> numLines) {
    this.numLines = numLines;
  }

  public void setNumLines(@jakarta.annotation.Nullable Integer numLines) {
    this.numLines = JsonNullable.<Integer>of(numLines);
  }

  public FileSchema source(@jakarta.annotation.Nonnull Source source) {
    
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Source getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSource(@jakarta.annotation.Nonnull Source source) {
    this.source = source;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileSchema fileSchema = (FileSchema) o;
    return Objects.equals(this.id, fileSchema.id) &&
        Objects.equals(this._object, fileSchema._object) &&
        Objects.equals(this.bytes, fileSchema.bytes) &&
        Objects.equals(this.createdAt, fileSchema.createdAt) &&
        Objects.equals(this.filename, fileSchema.filename) &&
        Objects.equals(this.purpose, fileSchema.purpose) &&
        Objects.equals(this.sampleType, fileSchema.sampleType) &&
        equalsNullable(this.numLines, fileSchema.numLines) &&
        Objects.equals(this.source, fileSchema.source);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, _object, bytes, createdAt, filename, purpose, sampleType, hashCodeNullable(numLines), source);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileSchema {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    bytes: ").append(toIndentedString(bytes)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    sampleType: ").append(toIndentedString(sampleType)).append("\n");
    sb.append("    numLines: ").append(toIndentedString(numLines)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

