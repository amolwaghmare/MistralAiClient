/*
 * Mistral AI API
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.arhs.ai.poc.mistral.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.jackson.nullable.JsonNullable;

import java.math.BigDecimal;
import java.util.*;

/**
 * ChatCompletionRequest
 */
@JsonPropertyOrder({
  ChatCompletionRequest.JSON_PROPERTY_MODEL,
  ChatCompletionRequest.JSON_PROPERTY_TEMPERATURE,
  ChatCompletionRequest.JSON_PROPERTY_TOP_P,
  ChatCompletionRequest.JSON_PROPERTY_MAX_TOKENS,
  ChatCompletionRequest.JSON_PROPERTY_STREAM,
  ChatCompletionRequest.JSON_PROPERTY_STOP,
  ChatCompletionRequest.JSON_PROPERTY_RANDOM_SEED,
  ChatCompletionRequest.JSON_PROPERTY_MESSAGES,
  ChatCompletionRequest.JSON_PROPERTY_RESPONSE_FORMAT,
  ChatCompletionRequest.JSON_PROPERTY_TOOLS,
  ChatCompletionRequest.JSON_PROPERTY_TOOL_CHOICE,
  ChatCompletionRequest.JSON_PROPERTY_PRESENCE_PENALTY,
  ChatCompletionRequest.JSON_PROPERTY_FREQUENCY_PENALTY,
  ChatCompletionRequest.JSON_PROPERTY_N,
  ChatCompletionRequest.JSON_PROPERTY_PREDICTION,
  ChatCompletionRequest.JSON_PROPERTY_SAFE_PROMPT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-05T14:53:13.544788800+01:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class ChatCompletionRequest {
  public static final String JSON_PROPERTY_MODEL = "model";
  @jakarta.annotation.Nullable
  private String model;

  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  @jakarta.annotation.Nullable
  private JsonNullable<BigDecimal> temperature = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_TOP_P = "top_p";
  @jakarta.annotation.Nullable
  private BigDecimal topP = new BigDecimal("1");

  public static final String JSON_PROPERTY_MAX_TOKENS = "max_tokens";
  @jakarta.annotation.Nullable
  private JsonNullable<Integer> maxTokens = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_STREAM = "stream";
  @jakarta.annotation.Nullable
  private Boolean stream = false;

  public static final String JSON_PROPERTY_STOP = "stop";
  @jakarta.annotation.Nullable
  private Stop stop;

  public static final String JSON_PROPERTY_RANDOM_SEED = "random_seed";
  @jakarta.annotation.Nullable
  private JsonNullable<Integer> randomSeed = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MESSAGES = "messages";
  @jakarta.annotation.Nonnull
  private List<MessagesInner> messages = new ArrayList<>();

  public static final String JSON_PROPERTY_RESPONSE_FORMAT = "response_format";
  @jakarta.annotation.Nullable
  private ResponseFormat responseFormat;

  public static final String JSON_PROPERTY_TOOLS = "tools";
  @jakarta.annotation.Nullable
  private JsonNullable<List<Tool>> tools = JsonNullable.<List<Tool>>undefined();

  public static final String JSON_PROPERTY_TOOL_CHOICE = "tool_choice";
  @jakarta.annotation.Nullable
  private ToolChoice toolChoice ;

  public static final String JSON_PROPERTY_PRESENCE_PENALTY = "presence_penalty";
  @jakarta.annotation.Nullable
  private BigDecimal presencePenalty = new BigDecimal("0");

  public static final String JSON_PROPERTY_FREQUENCY_PENALTY = "frequency_penalty";
  @jakarta.annotation.Nullable
  private BigDecimal frequencyPenalty = new BigDecimal("0");

  public static final String JSON_PROPERTY_N = "n";
  @jakarta.annotation.Nullable
  private JsonNullable<Integer> n = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_PREDICTION = "prediction";
  @jakarta.annotation.Nullable
  private Prediction prediction;

  public static final String JSON_PROPERTY_SAFE_PROMPT = "safe_prompt";
  @jakarta.annotation.Nullable
  private Boolean safePrompt = false;

  public ChatCompletionRequest() {
  }

  public ChatCompletionRequest model(@jakarta.annotation.Nullable String model) {
    
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModel(@jakarta.annotation.Nullable String model) {
    this.model = model;
  }

  public ChatCompletionRequest temperature(@jakarta.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
    
    return this;
  }

  /**
   * Get temperature
   * minimum: 0
   * maximum: 1.5
   * @return temperature
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTemperature() {
        return temperature.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTemperature_JsonNullable() {
    return temperature;
  }
  
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  public void setTemperature_JsonNullable(JsonNullable<BigDecimal> temperature) {
    this.temperature = temperature;
  }

  public void setTemperature(@jakarta.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
  }

  public ChatCompletionRequest topP(@jakarta.annotation.Nullable BigDecimal topP) {
    
    this.topP = topP;
    return this;
  }

  /**
   * Nucleus sampling, where the model considers the results of the tokens with &#x60;top_p&#x60; probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or &#x60;temperature&#x60; but not both.
   * minimum: 0
   * maximum: 1
   * @return topP
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTopP() {
    return topP;
  }


  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTopP(@jakarta.annotation.Nullable BigDecimal topP) {
    this.topP = topP;
  }

  public ChatCompletionRequest maxTokens(@jakarta.annotation.Nullable Integer maxTokens) {
    this.maxTokens = JsonNullable.<Integer>of(maxTokens);
    
    return this;
  }

  /**
   * Get maxTokens
   * minimum: 0
   * @return maxTokens
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Integer getMaxTokens() {
        return maxTokens.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxTokens_JsonNullable() {
    return maxTokens;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_TOKENS)
  public void setMaxTokens_JsonNullable(JsonNullable<Integer> maxTokens) {
    this.maxTokens = maxTokens;
  }

  public void setMaxTokens(@jakarta.annotation.Nullable Integer maxTokens) {
    this.maxTokens = JsonNullable.<Integer>of(maxTokens);
  }

  public ChatCompletionRequest stream(@jakarta.annotation.Nullable Boolean stream) {
    
    this.stream = stream;
    return this;
  }

  /**
   * Whether to stream back partial progress. If set, tokens will be sent as data-only server-side events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
   * @return stream
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStream() {
    return stream;
  }


  @JsonProperty(JSON_PROPERTY_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStream(@jakarta.annotation.Nullable Boolean stream) {
    this.stream = stream;
  }

  public ChatCompletionRequest stop(@jakarta.annotation.Nullable Stop stop) {
    
    this.stop = stop;
    return this;
  }

  /**
   * Get stop
   * @return stop
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Stop getStop() {
    return stop;
  }


  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStop(@jakarta.annotation.Nullable Stop stop) {
    this.stop = stop;
  }

  public ChatCompletionRequest randomSeed(@jakarta.annotation.Nullable Integer randomSeed) {
    this.randomSeed = JsonNullable.<Integer>of(randomSeed);
    
    return this;
  }

  /**
   * Get randomSeed
   * minimum: 0
   * @return randomSeed
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Integer getRandomSeed() {
        return randomSeed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RANDOM_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getRandomSeed_JsonNullable() {
    return randomSeed;
  }
  
  @JsonProperty(JSON_PROPERTY_RANDOM_SEED)
  public void setRandomSeed_JsonNullable(JsonNullable<Integer> randomSeed) {
    this.randomSeed = randomSeed;
  }

  public void setRandomSeed(@jakarta.annotation.Nullable Integer randomSeed) {
    this.randomSeed = JsonNullable.<Integer>of(randomSeed);
  }

  public ChatCompletionRequest messages(@jakarta.annotation.Nonnull List<MessagesInner> messages) {
    
    this.messages = messages;
    return this;
  }

  public ChatCompletionRequest addMessagesItem(MessagesInner messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * The prompt(s) to generate completions for, encoded as a list of dict with role and content.
   * @return messages
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<MessagesInner> getMessages() {
    return messages;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessages(@jakarta.annotation.Nonnull List<MessagesInner> messages) {
    this.messages = messages;
  }

  public ChatCompletionRequest responseFormat(@jakarta.annotation.Nullable ResponseFormat responseFormat) {
    
    this.responseFormat = responseFormat;
    return this;
  }

  /**
   * Get responseFormat
   * @return responseFormat
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResponseFormat getResponseFormat() {
    return responseFormat;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseFormat(@jakarta.annotation.Nullable ResponseFormat responseFormat) {
    this.responseFormat = responseFormat;
  }

  public ChatCompletionRequest tools(@jakarta.annotation.Nullable List<Tool> tools) {
    this.tools = JsonNullable.<List<Tool>>of(tools);
    
    return this;
  }

  public ChatCompletionRequest addToolsItem(Tool toolsItem) {
    if (this.tools == null || !this.tools.isPresent()) {
      this.tools = JsonNullable.<List<Tool>>of(new ArrayList<>());
    }
    try {
      this.tools.get().add(toolsItem);
    } catch (NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get tools
   * @return tools
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<Tool> getTools() {
        return tools.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<Tool>> getTools_JsonNullable() {
    return tools;
  }
  
  @JsonProperty(JSON_PROPERTY_TOOLS)
  public void setTools_JsonNullable(JsonNullable<List<Tool>> tools) {
    this.tools = tools;
  }

  public void setTools(@jakarta.annotation.Nullable List<Tool> tools) {
    this.tools = JsonNullable.<List<Tool>>of(tools);
  }

  public ChatCompletionRequest toolChoice(@jakarta.annotation.Nullable ToolChoice toolChoice) {
    
    this.toolChoice = toolChoice;
    return this;
  }

  /**
   * Get toolChoice
   * @return toolChoice
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ToolChoice getToolChoice() {
    return toolChoice;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToolChoice(@jakarta.annotation.Nullable ToolChoice toolChoice) {
    this.toolChoice = toolChoice;
  }

  public ChatCompletionRequest presencePenalty(@jakarta.annotation.Nullable BigDecimal presencePenalty) {
    
    this.presencePenalty = presencePenalty;
    return this;
  }

  /**
   * presence_penalty determines how much the model penalizes the repetition of words or phrases. A higher presence penalty encourages the model to use a wider variety of words and phrases, making the output more diverse and creative.
   * minimum: -2
   * maximum: 2
   * @return presencePenalty
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRESENCE_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPresencePenalty() {
    return presencePenalty;
  }


  @JsonProperty(JSON_PROPERTY_PRESENCE_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPresencePenalty(@jakarta.annotation.Nullable BigDecimal presencePenalty) {
    this.presencePenalty = presencePenalty;
  }

  public ChatCompletionRequest frequencyPenalty(@jakarta.annotation.Nullable BigDecimal frequencyPenalty) {
    
    this.frequencyPenalty = frequencyPenalty;
    return this;
  }

  /**
   * frequency_penalty penalizes the repetition of words based on their frequency in the generated text. A higher frequency penalty discourages the model from repeating words that have already appeared frequently in the output, promoting diversity and reducing repetition.
   * minimum: -2
   * maximum: 2
   * @return frequencyPenalty
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREQUENCY_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getFrequencyPenalty() {
    return frequencyPenalty;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENCY_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrequencyPenalty(@jakarta.annotation.Nullable BigDecimal frequencyPenalty) {
    this.frequencyPenalty = frequencyPenalty;
  }

  public ChatCompletionRequest n(@jakarta.annotation.Nullable Integer n) {
    this.n = JsonNullable.<Integer>of(n);
    
    return this;
  }

  /**
   * Get n
   * minimum: 1
   * @return n
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Integer getN() {
        return n.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getN_JsonNullable() {
    return n;
  }
  
  @JsonProperty(JSON_PROPERTY_N)
  public void setN_JsonNullable(JsonNullable<Integer> n) {
    this.n = n;
  }

  public void setN(@jakarta.annotation.Nullable Integer n) {
    this.n = JsonNullable.<Integer>of(n);
  }

  public ChatCompletionRequest prediction(@jakarta.annotation.Nullable Prediction prediction) {
    
    this.prediction = prediction;
    return this;
  }

  /**
   * Get prediction
   * @return prediction
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREDICTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Prediction getPrediction() {
    return prediction;
  }


  @JsonProperty(JSON_PROPERTY_PREDICTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrediction(@jakarta.annotation.Nullable Prediction prediction) {
    this.prediction = prediction;
  }

  public ChatCompletionRequest safePrompt(@jakarta.annotation.Nullable Boolean safePrompt) {
    
    this.safePrompt = safePrompt;
    return this;
  }

  /**
   * Whether to inject a safety prompt before all conversations.
   * @return safePrompt
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAFE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSafePrompt() {
    return safePrompt;
  }


  @JsonProperty(JSON_PROPERTY_SAFE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSafePrompt(@jakarta.annotation.Nullable Boolean safePrompt) {
    this.safePrompt = safePrompt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChatCompletionRequest chatCompletionRequest = (ChatCompletionRequest) o;
    return Objects.equals(this.model, chatCompletionRequest.model) &&
        equalsNullable(this.temperature, chatCompletionRequest.temperature) &&
        Objects.equals(this.topP, chatCompletionRequest.topP) &&
        equalsNullable(this.maxTokens, chatCompletionRequest.maxTokens) &&
        Objects.equals(this.stream, chatCompletionRequest.stream) &&
        Objects.equals(this.stop, chatCompletionRequest.stop) &&
        equalsNullable(this.randomSeed, chatCompletionRequest.randomSeed) &&
        Objects.equals(this.messages, chatCompletionRequest.messages) &&
        Objects.equals(this.responseFormat, chatCompletionRequest.responseFormat) &&
        equalsNullable(this.tools, chatCompletionRequest.tools) &&
        Objects.equals(this.toolChoice, chatCompletionRequest.toolChoice) &&
        Objects.equals(this.presencePenalty, chatCompletionRequest.presencePenalty) &&
        Objects.equals(this.frequencyPenalty, chatCompletionRequest.frequencyPenalty) &&
        equalsNullable(this.n, chatCompletionRequest.n) &&
        Objects.equals(this.prediction, chatCompletionRequest.prediction) &&
        Objects.equals(this.safePrompt, chatCompletionRequest.safePrompt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, hashCodeNullable(temperature), topP, hashCodeNullable(maxTokens), stream, stop, hashCodeNullable(randomSeed), messages, responseFormat, hashCodeNullable(tools), toolChoice, presencePenalty, frequencyPenalty, hashCodeNullable(n), prediction, safePrompt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatCompletionRequest {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    randomSeed: ").append(toIndentedString(randomSeed)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    toolChoice: ").append(toIndentedString(toolChoice)).append("\n");
    sb.append("    presencePenalty: ").append(toIndentedString(presencePenalty)).append("\n");
    sb.append("    frequencyPenalty: ").append(toIndentedString(frequencyPenalty)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    prediction: ").append(toIndentedString(prediction)).append("\n");
    sb.append("    safePrompt: ").append(toIndentedString(safePrompt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

