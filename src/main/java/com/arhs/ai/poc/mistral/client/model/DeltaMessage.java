/*
 * Mistral AI API
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.arhs.ai.poc.mistral.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.jackson.nullable.JsonNullable;

import java.util.*;

/**
 * DeltaMessage
 */
@JsonPropertyOrder({
  DeltaMessage.JSON_PROPERTY_ROLE,
  DeltaMessage.JSON_PROPERTY_CONTENT,
  DeltaMessage.JSON_PROPERTY_TOOL_CALLS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-05T14:53:13.544788800+01:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class DeltaMessage {
  public static final String JSON_PROPERTY_ROLE = "role";
  @jakarta.annotation.Nullable
  private JsonNullable<String> role = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CONTENT = "content";
  @jakarta.annotation.Nullable
  private JsonNullable<DeltaMessageContent> content = JsonNullable.<DeltaMessageContent>undefined();

  public static final String JSON_PROPERTY_TOOL_CALLS = "tool_calls";
  @jakarta.annotation.Nullable
  private JsonNullable<List<ToolCall>> toolCalls = JsonNullable.<List<ToolCall>>undefined();

  public DeltaMessage() {
  }

  public DeltaMessage role(@jakarta.annotation.Nullable String role) {
    this.role = JsonNullable.<String>of(role);
    
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getRole() {
        return role.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRole_JsonNullable() {
    return role;
  }
  
  @JsonProperty(JSON_PROPERTY_ROLE)
  public void setRole_JsonNullable(JsonNullable<String> role) {
    this.role = role;
  }

  public void setRole(@jakarta.annotation.Nullable String role) {
    this.role = JsonNullable.<String>of(role);
  }

  public DeltaMessage content(@jakarta.annotation.Nullable DeltaMessageContent content) {
    this.content = JsonNullable.<DeltaMessageContent>of(content);
    
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public DeltaMessageContent getContent() {
        return content.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DeltaMessageContent> getContent_JsonNullable() {
    return content;
  }
  
  @JsonProperty(JSON_PROPERTY_CONTENT)
  public void setContent_JsonNullable(JsonNullable<DeltaMessageContent> content) {
    this.content = content;
  }

  public void setContent(@jakarta.annotation.Nullable DeltaMessageContent content) {
    this.content = JsonNullable.<DeltaMessageContent>of(content);
  }

  public DeltaMessage toolCalls(@jakarta.annotation.Nullable List<ToolCall> toolCalls) {
    this.toolCalls = JsonNullable.<List<ToolCall>>of(toolCalls);
    
    return this;
  }

  public DeltaMessage addToolCallsItem(ToolCall toolCallsItem) {
    if (this.toolCalls == null || !this.toolCalls.isPresent()) {
      this.toolCalls = JsonNullable.<List<ToolCall>>of(new ArrayList<>());
    }
    try {
      this.toolCalls.get().add(toolCallsItem);
    } catch (NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get toolCalls
   * @return toolCalls
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<ToolCall> getToolCalls() {
        return toolCalls.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOOL_CALLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<ToolCall>> getToolCalls_JsonNullable() {
    return toolCalls;
  }
  
  @JsonProperty(JSON_PROPERTY_TOOL_CALLS)
  public void setToolCalls_JsonNullable(JsonNullable<List<ToolCall>> toolCalls) {
    this.toolCalls = toolCalls;
  }

  public void setToolCalls(@jakarta.annotation.Nullable List<ToolCall> toolCalls) {
    this.toolCalls = JsonNullable.<List<ToolCall>>of(toolCalls);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeltaMessage deltaMessage = (DeltaMessage) o;
    return equalsNullable(this.role, deltaMessage.role) &&
        equalsNullable(this.content, deltaMessage.content) &&
        equalsNullable(this.toolCalls, deltaMessage.toolCalls);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(role), hashCodeNullable(content), hashCodeNullable(toolCalls));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeltaMessage {\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    toolCalls: ").append(toIndentedString(toolCalls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

