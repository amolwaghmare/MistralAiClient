/*
 * Mistral AI API
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.arhs.ai.poc.mistral.client.model;

import com.fasterxml.jackson.annotation.*;
import org.openapitools.jackson.nullable.JsonNullable;

import java.util.*;

/**
 * MessagesInner
 */
@JsonPropertyOrder({
  MessagesInner.JSON_PROPERTY_CONTENT,
  MessagesInner.JSON_PROPERTY_ROLE,
  MessagesInner.JSON_PROPERTY_TOOL_CALLS,
  MessagesInner.JSON_PROPERTY_PREFIX,
  MessagesInner.JSON_PROPERTY_TOOL_CALL_ID,
  MessagesInner.JSON_PROPERTY_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-05T14:53:13.544788800+01:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
@JsonIgnoreProperties(
  value = "role", // ignore manually set role, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the role to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "role", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AssistantMessage.class, name = "assistant"),
  @JsonSubTypes.Type(value = SystemMessage.class, name = "system"),
  @JsonSubTypes.Type(value = ToolMessage.class, name = "tool"),
  @JsonSubTypes.Type(value = UserMessage.class, name = "user"),
  @JsonSubTypes.Type(value = AssistantMessage.class, name = "AssistantMessage"),
  @JsonSubTypes.Type(value = SystemMessage.class, name = "SystemMessage"),
  @JsonSubTypes.Type(value = ToolMessage.class, name = "ToolMessage"),
  @JsonSubTypes.Type(value = UserMessage.class, name = "UserMessage"),
})

public class MessagesInner {
  public static final String JSON_PROPERTY_CONTENT = "content";
  @jakarta.annotation.Nullable
  private Content content;

  /**
   * Gets or Sets role
   */
  public enum RoleEnum {
    TOOL(String.valueOf("tool")),
    USER(String.valueOf("user"));

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ROLE = "role";
  @jakarta.annotation.Nullable
  private RoleEnum role = RoleEnum.TOOL;

  public static final String JSON_PROPERTY_TOOL_CALLS = "tool_calls";
  @jakarta.annotation.Nullable
  private JsonNullable<List<ToolCall>> toolCalls = JsonNullable.<List<ToolCall>>undefined();

  public static final String JSON_PROPERTY_PREFIX = "prefix";
  @jakarta.annotation.Nullable
  private Boolean prefix = false;

  public static final String JSON_PROPERTY_TOOL_CALL_ID = "tool_call_id";
  @jakarta.annotation.Nullable
  private JsonNullable<String> toolCallId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nullable
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public MessagesInner() {
  }

  public MessagesInner content(@jakarta.annotation.Nullable Content content) {
    
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Content getContent() {
    return content;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContent(@jakarta.annotation.Nullable Content content) {
    this.content = content;
  }

  public MessagesInner role(@jakarta.annotation.Nullable RoleEnum role) {
    
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RoleEnum getRole() {
    return role;
  }


  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRole(@jakarta.annotation.Nullable RoleEnum role) {
    this.role = role;
  }

  public MessagesInner toolCalls(@jakarta.annotation.Nullable List<ToolCall> toolCalls) {
    this.toolCalls = JsonNullable.<List<ToolCall>>of(toolCalls);
    
    return this;
  }

  public MessagesInner addToolCallsItem(ToolCall toolCallsItem) {
    if (this.toolCalls == null || !this.toolCalls.isPresent()) {
      this.toolCalls = JsonNullable.<List<ToolCall>>of(new ArrayList<>());
    }
    try {
      this.toolCalls.get().add(toolCallsItem);
    } catch (NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get toolCalls
   * @return toolCalls
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<ToolCall> getToolCalls() {
        return toolCalls.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOOL_CALLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<ToolCall>> getToolCalls_JsonNullable() {
    return toolCalls;
  }
  
  @JsonProperty(JSON_PROPERTY_TOOL_CALLS)
  public void setToolCalls_JsonNullable(JsonNullable<List<ToolCall>> toolCalls) {
    this.toolCalls = toolCalls;
  }

  public void setToolCalls(@jakarta.annotation.Nullable List<ToolCall> toolCalls) {
    this.toolCalls = JsonNullable.<List<ToolCall>>of(toolCalls);
  }

  public MessagesInner prefix(@jakarta.annotation.Nullable Boolean prefix) {
    
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPrefix() {
    return prefix;
  }


  @JsonProperty(JSON_PROPERTY_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrefix(@jakarta.annotation.Nullable Boolean prefix) {
    this.prefix = prefix;
  }

  public MessagesInner toolCallId(@jakarta.annotation.Nullable String toolCallId) {
    this.toolCallId = JsonNullable.<String>of(toolCallId);
    
    return this;
  }

  /**
   * Get toolCallId
   * @return toolCallId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getToolCallId() {
        return toolCallId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getToolCallId_JsonNullable() {
    return toolCallId;
  }
  
  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  public void setToolCallId_JsonNullable(JsonNullable<String> toolCallId) {
    this.toolCallId = toolCallId;
  }

  public void setToolCallId(@jakarta.annotation.Nullable String toolCallId) {
    this.toolCallId = JsonNullable.<String>of(toolCallId);
  }

  public MessagesInner name(@jakarta.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
    
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagesInner messagesInner = (MessagesInner) o;
    return Objects.equals(this.content, messagesInner.content) &&
        Objects.equals(this.role, messagesInner.role) &&
        equalsNullable(this.toolCalls, messagesInner.toolCalls) &&
        Objects.equals(this.prefix, messagesInner.prefix) &&
        equalsNullable(this.toolCallId, messagesInner.toolCallId) &&
        equalsNullable(this.name, messagesInner.name);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, role, hashCodeNullable(toolCalls), prefix, hashCodeNullable(toolCallId), hashCodeNullable(name));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagesInner {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    toolCalls: ").append(toIndentedString(toolCalls)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    toolCallId: ").append(toIndentedString(toolCallId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

