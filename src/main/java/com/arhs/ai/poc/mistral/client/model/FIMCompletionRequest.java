/*
 * Mistral AI API
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.arhs.ai.poc.mistral.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.jackson.nullable.JsonNullable;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Objects;

/**
 * FIMCompletionRequest
 */
@JsonPropertyOrder({
  FIMCompletionRequest.JSON_PROPERTY_MODEL,
  FIMCompletionRequest.JSON_PROPERTY_TEMPERATURE,
  FIMCompletionRequest.JSON_PROPERTY_TOP_P,
  FIMCompletionRequest.JSON_PROPERTY_MAX_TOKENS,
  FIMCompletionRequest.JSON_PROPERTY_STREAM,
  FIMCompletionRequest.JSON_PROPERTY_STOP,
  FIMCompletionRequest.JSON_PROPERTY_RANDOM_SEED,
  FIMCompletionRequest.JSON_PROPERTY_PROMPT,
  FIMCompletionRequest.JSON_PROPERTY_SUFFIX,
  FIMCompletionRequest.JSON_PROPERTY_MIN_TOKENS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-05T14:53:13.544788800+01:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class FIMCompletionRequest {
  public static final String JSON_PROPERTY_MODEL = "model";
  @jakarta.annotation.Nullable
  private String model;

  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  @jakarta.annotation.Nullable
  private JsonNullable<BigDecimal> temperature = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_TOP_P = "top_p";
  @jakarta.annotation.Nullable
  private BigDecimal topP = new BigDecimal("1");

  public static final String JSON_PROPERTY_MAX_TOKENS = "max_tokens";
  @jakarta.annotation.Nullable
  private JsonNullable<Integer> maxTokens = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_STREAM = "stream";
  @jakarta.annotation.Nullable
  private Boolean stream = false;

  public static final String JSON_PROPERTY_STOP = "stop";
  @jakarta.annotation.Nullable
  private Stop stop;

  public static final String JSON_PROPERTY_RANDOM_SEED = "random_seed";
  @jakarta.annotation.Nullable
  private JsonNullable<Integer> randomSeed = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_PROMPT = "prompt";
  @jakarta.annotation.Nonnull
  private String prompt;

  public static final String JSON_PROPERTY_SUFFIX = "suffix";
  @jakarta.annotation.Nullable
  private JsonNullable<String> suffix = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MIN_TOKENS = "min_tokens";
  @jakarta.annotation.Nullable
  private JsonNullable<Integer> minTokens = JsonNullable.<Integer>undefined();

  public FIMCompletionRequest() {
  }

  public FIMCompletionRequest model(@jakarta.annotation.Nullable String model) {
    
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModel(@jakarta.annotation.Nullable String model) {
    this.model = model;
  }

  public FIMCompletionRequest temperature(@jakarta.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
    
    return this;
  }

  /**
   * Get temperature
   * minimum: 0
   * maximum: 1.5
   * @return temperature
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTemperature() {
        return temperature.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTemperature_JsonNullable() {
    return temperature;
  }
  
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  public void setTemperature_JsonNullable(JsonNullable<BigDecimal> temperature) {
    this.temperature = temperature;
  }

  public void setTemperature(@jakarta.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
  }

  public FIMCompletionRequest topP(@jakarta.annotation.Nullable BigDecimal topP) {
    
    this.topP = topP;
    return this;
  }

  /**
   * Nucleus sampling, where the model considers the results of the tokens with &#x60;top_p&#x60; probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or &#x60;temperature&#x60; but not both.
   * minimum: 0
   * maximum: 1
   * @return topP
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTopP() {
    return topP;
  }


  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTopP(@jakarta.annotation.Nullable BigDecimal topP) {
    this.topP = topP;
  }

  public FIMCompletionRequest maxTokens(@jakarta.annotation.Nullable Integer maxTokens) {
    this.maxTokens = JsonNullable.<Integer>of(maxTokens);
    
    return this;
  }

  /**
   * Get maxTokens
   * minimum: 0
   * @return maxTokens
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Integer getMaxTokens() {
        return maxTokens.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxTokens_JsonNullable() {
    return maxTokens;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_TOKENS)
  public void setMaxTokens_JsonNullable(JsonNullable<Integer> maxTokens) {
    this.maxTokens = maxTokens;
  }

  public void setMaxTokens(@jakarta.annotation.Nullable Integer maxTokens) {
    this.maxTokens = JsonNullable.<Integer>of(maxTokens);
  }

  public FIMCompletionRequest stream(@jakarta.annotation.Nullable Boolean stream) {
    
    this.stream = stream;
    return this;
  }

  /**
   * Whether to stream back partial progress. If set, tokens will be sent as data-only server-side events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
   * @return stream
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStream() {
    return stream;
  }


  @JsonProperty(JSON_PROPERTY_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStream(@jakarta.annotation.Nullable Boolean stream) {
    this.stream = stream;
  }

  public FIMCompletionRequest stop(@jakarta.annotation.Nullable Stop stop) {
    
    this.stop = stop;
    return this;
  }

  /**
   * Get stop
   * @return stop
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Stop getStop() {
    return stop;
  }


  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStop(@jakarta.annotation.Nullable Stop stop) {
    this.stop = stop;
  }

  public FIMCompletionRequest randomSeed(@jakarta.annotation.Nullable Integer randomSeed) {
    this.randomSeed = JsonNullable.<Integer>of(randomSeed);
    
    return this;
  }

  /**
   * Get randomSeed
   * minimum: 0
   * @return randomSeed
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Integer getRandomSeed() {
        return randomSeed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RANDOM_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getRandomSeed_JsonNullable() {
    return randomSeed;
  }
  
  @JsonProperty(JSON_PROPERTY_RANDOM_SEED)
  public void setRandomSeed_JsonNullable(JsonNullable<Integer> randomSeed) {
    this.randomSeed = randomSeed;
  }

  public void setRandomSeed(@jakarta.annotation.Nullable Integer randomSeed) {
    this.randomSeed = JsonNullable.<Integer>of(randomSeed);
  }

  public FIMCompletionRequest prompt(@jakarta.annotation.Nonnull String prompt) {
    
    this.prompt = prompt;
    return this;
  }

  /**
   * The text/code to complete.
   * @return prompt
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPrompt() {
    return prompt;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPrompt(@jakarta.annotation.Nonnull String prompt) {
    this.prompt = prompt;
  }

  public FIMCompletionRequest suffix(@jakarta.annotation.Nullable String suffix) {
    this.suffix = JsonNullable.<String>of(suffix);
    
    return this;
  }

  /**
   * Get suffix
   * @return suffix
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getSuffix() {
        return suffix.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSuffix_JsonNullable() {
    return suffix;
  }
  
  @JsonProperty(JSON_PROPERTY_SUFFIX)
  public void setSuffix_JsonNullable(JsonNullable<String> suffix) {
    this.suffix = suffix;
  }

  public void setSuffix(@jakarta.annotation.Nullable String suffix) {
    this.suffix = JsonNullable.<String>of(suffix);
  }

  public FIMCompletionRequest minTokens(@jakarta.annotation.Nullable Integer minTokens) {
    this.minTokens = JsonNullable.<Integer>of(minTokens);
    
    return this;
  }

  /**
   * Get minTokens
   * minimum: 0
   * @return minTokens
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Integer getMinTokens() {
        return minTokens.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMinTokens_JsonNullable() {
    return minTokens;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_TOKENS)
  public void setMinTokens_JsonNullable(JsonNullable<Integer> minTokens) {
    this.minTokens = minTokens;
  }

  public void setMinTokens(@jakarta.annotation.Nullable Integer minTokens) {
    this.minTokens = JsonNullable.<Integer>of(minTokens);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FIMCompletionRequest fiMCompletionRequest = (FIMCompletionRequest) o;
    return Objects.equals(this.model, fiMCompletionRequest.model) &&
        equalsNullable(this.temperature, fiMCompletionRequest.temperature) &&
        Objects.equals(this.topP, fiMCompletionRequest.topP) &&
        equalsNullable(this.maxTokens, fiMCompletionRequest.maxTokens) &&
        Objects.equals(this.stream, fiMCompletionRequest.stream) &&
        Objects.equals(this.stop, fiMCompletionRequest.stop) &&
        equalsNullable(this.randomSeed, fiMCompletionRequest.randomSeed) &&
        Objects.equals(this.prompt, fiMCompletionRequest.prompt) &&
        equalsNullable(this.suffix, fiMCompletionRequest.suffix) &&
        equalsNullable(this.minTokens, fiMCompletionRequest.minTokens);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, hashCodeNullable(temperature), topP, hashCodeNullable(maxTokens), stream, stop, hashCodeNullable(randomSeed), prompt, hashCodeNullable(suffix), hashCodeNullable(minTokens));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FIMCompletionRequest {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    randomSeed: ").append(toIndentedString(randomSeed)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    minTokens: ").append(toIndentedString(minTokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

