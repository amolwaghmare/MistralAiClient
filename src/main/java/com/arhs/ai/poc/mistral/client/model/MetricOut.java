/*
 * Mistral AI API
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.arhs.ai.poc.mistral.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.jackson.nullable.JsonNullable;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Objects;

/**
 * Metrics at the step number during the fine-tuning job. Use these metrics to assess if the training is going smoothly (loss should decrease, token accuracy should increase).
 */
@JsonPropertyOrder({
  MetricOut.JSON_PROPERTY_TRAIN_LOSS,
  MetricOut.JSON_PROPERTY_VALID_LOSS,
  MetricOut.JSON_PROPERTY_VALID_MEAN_TOKEN_ACCURACY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-05T14:53:13.544788800+01:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class MetricOut {
  public static final String JSON_PROPERTY_TRAIN_LOSS = "train_loss";
  @jakarta.annotation.Nullable
  private JsonNullable<BigDecimal> trainLoss = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_VALID_LOSS = "valid_loss";
  @jakarta.annotation.Nullable
  private JsonNullable<BigDecimal> validLoss = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_VALID_MEAN_TOKEN_ACCURACY = "valid_mean_token_accuracy";
  @jakarta.annotation.Nullable
  private JsonNullable<BigDecimal> validMeanTokenAccuracy = JsonNullable.<BigDecimal>undefined();

  public MetricOut() {
  }

  public MetricOut trainLoss(@jakarta.annotation.Nullable BigDecimal trainLoss) {
    this.trainLoss = JsonNullable.<BigDecimal>of(trainLoss);
    
    return this;
  }

  /**
   * Get trainLoss
   * @return trainLoss
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTrainLoss() {
        return trainLoss.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRAIN_LOSS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTrainLoss_JsonNullable() {
    return trainLoss;
  }
  
  @JsonProperty(JSON_PROPERTY_TRAIN_LOSS)
  public void setTrainLoss_JsonNullable(JsonNullable<BigDecimal> trainLoss) {
    this.trainLoss = trainLoss;
  }

  public void setTrainLoss(@jakarta.annotation.Nullable BigDecimal trainLoss) {
    this.trainLoss = JsonNullable.<BigDecimal>of(trainLoss);
  }

  public MetricOut validLoss(@jakarta.annotation.Nullable BigDecimal validLoss) {
    this.validLoss = JsonNullable.<BigDecimal>of(validLoss);
    
    return this;
  }

  /**
   * Get validLoss
   * @return validLoss
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public BigDecimal getValidLoss() {
        return validLoss.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALID_LOSS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getValidLoss_JsonNullable() {
    return validLoss;
  }
  
  @JsonProperty(JSON_PROPERTY_VALID_LOSS)
  public void setValidLoss_JsonNullable(JsonNullable<BigDecimal> validLoss) {
    this.validLoss = validLoss;
  }

  public void setValidLoss(@jakarta.annotation.Nullable BigDecimal validLoss) {
    this.validLoss = JsonNullable.<BigDecimal>of(validLoss);
  }

  public MetricOut validMeanTokenAccuracy(@jakarta.annotation.Nullable BigDecimal validMeanTokenAccuracy) {
    this.validMeanTokenAccuracy = JsonNullable.<BigDecimal>of(validMeanTokenAccuracy);
    
    return this;
  }

  /**
   * Get validMeanTokenAccuracy
   * @return validMeanTokenAccuracy
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public BigDecimal getValidMeanTokenAccuracy() {
        return validMeanTokenAccuracy.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALID_MEAN_TOKEN_ACCURACY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getValidMeanTokenAccuracy_JsonNullable() {
    return validMeanTokenAccuracy;
  }
  
  @JsonProperty(JSON_PROPERTY_VALID_MEAN_TOKEN_ACCURACY)
  public void setValidMeanTokenAccuracy_JsonNullable(JsonNullable<BigDecimal> validMeanTokenAccuracy) {
    this.validMeanTokenAccuracy = validMeanTokenAccuracy;
  }

  public void setValidMeanTokenAccuracy(@jakarta.annotation.Nullable BigDecimal validMeanTokenAccuracy) {
    this.validMeanTokenAccuracy = JsonNullable.<BigDecimal>of(validMeanTokenAccuracy);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricOut metricOut = (MetricOut) o;
    return equalsNullable(this.trainLoss, metricOut.trainLoss) &&
        equalsNullable(this.validLoss, metricOut.validLoss) &&
        equalsNullable(this.validMeanTokenAccuracy, metricOut.validMeanTokenAccuracy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(trainLoss), hashCodeNullable(validLoss), hashCodeNullable(validMeanTokenAccuracy));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricOut {\n");
    sb.append("    trainLoss: ").append(toIndentedString(trainLoss)).append("\n");
    sb.append("    validLoss: ").append(toIndentedString(validLoss)).append("\n");
    sb.append("    validMeanTokenAccuracy: ").append(toIndentedString(validMeanTokenAccuracy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

