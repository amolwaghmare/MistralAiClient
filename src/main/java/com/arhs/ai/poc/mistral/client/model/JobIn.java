/*
 * Mistral AI API
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.arhs.ai.poc.mistral.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.jackson.nullable.JsonNullable;

import java.util.*;

/**
 * JobIn
 */
@JsonPropertyOrder({
  JobIn.JSON_PROPERTY_MODEL,
  JobIn.JSON_PROPERTY_TRAINING_FILES,
  JobIn.JSON_PROPERTY_VALIDATION_FILES,
  JobIn.JSON_PROPERTY_HYPERPARAMETERS,
  JobIn.JSON_PROPERTY_SUFFIX,
  JobIn.JSON_PROPERTY_INTEGRATIONS,
  JobIn.JSON_PROPERTY_REPOSITORIES,
  JobIn.JSON_PROPERTY_AUTO_START
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-05T14:53:13.544788800+01:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class JobIn {
  public static final String JSON_PROPERTY_MODEL = "model";
  @jakarta.annotation.Nonnull
  private FineTuneableModel model;

  public static final String JSON_PROPERTY_TRAINING_FILES = "training_files";
  @jakarta.annotation.Nullable
  private List<TrainingFile> trainingFiles = new ArrayList<>();

  public static final String JSON_PROPERTY_VALIDATION_FILES = "validation_files";
  @jakarta.annotation.Nullable
  private JsonNullable<List<UUID>> validationFiles = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_HYPERPARAMETERS = "hyperparameters";
  @jakarta.annotation.Nonnull
  private TrainingParametersIn hyperparameters;

  public static final String JSON_PROPERTY_SUFFIX = "suffix";
  @jakarta.annotation.Nullable
  private JsonNullable<String> suffix = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_INTEGRATIONS = "integrations";
  @jakarta.annotation.Nullable
  private JsonNullable<List<JobInIntegrationsInner>> integrations = JsonNullable.<List<JobInIntegrationsInner>>undefined();

  public static final String JSON_PROPERTY_REPOSITORIES = "repositories";
  @jakarta.annotation.Nullable
  private List<RepositoriesInner1> repositories = new ArrayList<>();

  public static final String JSON_PROPERTY_AUTO_START = "auto_start";
  @jakarta.annotation.Nullable
  private Boolean autoStart;

  public JobIn() {
  }

  public JobIn model(@jakarta.annotation.Nonnull FineTuneableModel model) {
    
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FineTuneableModel getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModel(@jakarta.annotation.Nonnull FineTuneableModel model) {
    this.model = model;
  }

  public JobIn trainingFiles(@jakarta.annotation.Nullable List<TrainingFile> trainingFiles) {
    
    this.trainingFiles = trainingFiles;
    return this;
  }

  public JobIn addTrainingFilesItem(TrainingFile trainingFilesItem) {
    if (this.trainingFiles == null) {
      this.trainingFiles = new ArrayList<>();
    }
    this.trainingFiles.add(trainingFilesItem);
    return this;
  }

  /**
   * Get trainingFiles
   * @return trainingFiles
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRAINING_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TrainingFile> getTrainingFiles() {
    return trainingFiles;
  }


  @JsonProperty(JSON_PROPERTY_TRAINING_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrainingFiles(@jakarta.annotation.Nullable List<TrainingFile> trainingFiles) {
    this.trainingFiles = trainingFiles;
  }

  public JobIn validationFiles(@jakarta.annotation.Nullable List<UUID> validationFiles) {
    this.validationFiles = JsonNullable.<List<UUID>>of(validationFiles);
    
    return this;
  }

  public JobIn addValidationFilesItem(UUID validationFilesItem) {
    if (this.validationFiles == null || !this.validationFiles.isPresent()) {
      this.validationFiles = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.validationFiles.get().add(validationFilesItem);
    } catch (NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get validationFiles
   * @return validationFiles
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getValidationFiles() {
        return validationFiles.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALIDATION_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getValidationFiles_JsonNullable() {
    return validationFiles;
  }
  
  @JsonProperty(JSON_PROPERTY_VALIDATION_FILES)
  public void setValidationFiles_JsonNullable(JsonNullable<List<UUID>> validationFiles) {
    this.validationFiles = validationFiles;
  }

  public void setValidationFiles(@jakarta.annotation.Nullable List<UUID> validationFiles) {
    this.validationFiles = JsonNullable.<List<UUID>>of(validationFiles);
  }

  public JobIn hyperparameters(@jakarta.annotation.Nonnull TrainingParametersIn hyperparameters) {
    
    this.hyperparameters = hyperparameters;
    return this;
  }

  /**
   * Get hyperparameters
   * @return hyperparameters
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HYPERPARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TrainingParametersIn getHyperparameters() {
    return hyperparameters;
  }


  @JsonProperty(JSON_PROPERTY_HYPERPARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHyperparameters(@jakarta.annotation.Nonnull TrainingParametersIn hyperparameters) {
    this.hyperparameters = hyperparameters;
  }

  public JobIn suffix(@jakarta.annotation.Nullable String suffix) {
    this.suffix = JsonNullable.<String>of(suffix);
    
    return this;
  }

  /**
   * Get suffix
   * @return suffix
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getSuffix() {
        return suffix.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSuffix_JsonNullable() {
    return suffix;
  }
  
  @JsonProperty(JSON_PROPERTY_SUFFIX)
  public void setSuffix_JsonNullable(JsonNullable<String> suffix) {
    this.suffix = suffix;
  }

  public void setSuffix(@jakarta.annotation.Nullable String suffix) {
    this.suffix = JsonNullable.<String>of(suffix);
  }

  public JobIn integrations(@jakarta.annotation.Nullable List<JobInIntegrationsInner> integrations) {
    this.integrations = JsonNullable.<List<JobInIntegrationsInner>>of(integrations);
    
    return this;
  }

  public JobIn addIntegrationsItem(JobInIntegrationsInner integrationsItem) {
    if (this.integrations == null || !this.integrations.isPresent()) {
      this.integrations = JsonNullable.<List<JobInIntegrationsInner>>of(new ArrayList<>());
    }
    try {
      this.integrations.get().add(integrationsItem);
    } catch (NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get integrations
   * @return integrations
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<JobInIntegrationsInner> getIntegrations() {
        return integrations.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INTEGRATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<JobInIntegrationsInner>> getIntegrations_JsonNullable() {
    return integrations;
  }
  
  @JsonProperty(JSON_PROPERTY_INTEGRATIONS)
  public void setIntegrations_JsonNullable(JsonNullable<List<JobInIntegrationsInner>> integrations) {
    this.integrations = integrations;
  }

  public void setIntegrations(@jakarta.annotation.Nullable List<JobInIntegrationsInner> integrations) {
    this.integrations = JsonNullable.<List<JobInIntegrationsInner>>of(integrations);
  }

  public JobIn repositories(@jakarta.annotation.Nullable List<RepositoriesInner1> repositories) {
    
    this.repositories = repositories;
    return this;
  }

  public JobIn addRepositoriesItem(RepositoriesInner1 repositoriesItem) {
    if (this.repositories == null) {
      this.repositories = new ArrayList<>();
    }
    this.repositories.add(repositoriesItem);
    return this;
  }

  /**
   * Get repositories
   * @return repositories
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RepositoriesInner1> getRepositories() {
    return repositories;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepositories(@jakarta.annotation.Nullable List<RepositoriesInner1> repositories) {
    this.repositories = repositories;
  }

  public JobIn autoStart(@jakarta.annotation.Nullable Boolean autoStart) {
    
    this.autoStart = autoStart;
    return this;
  }

  /**
   * This field will be required in a future release.
   * @return autoStart
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAutoStart() {
    return autoStart;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoStart(@jakarta.annotation.Nullable Boolean autoStart) {
    this.autoStart = autoStart;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobIn jobIn = (JobIn) o;
    return Objects.equals(this.model, jobIn.model) &&
        Objects.equals(this.trainingFiles, jobIn.trainingFiles) &&
        equalsNullable(this.validationFiles, jobIn.validationFiles) &&
        Objects.equals(this.hyperparameters, jobIn.hyperparameters) &&
        equalsNullable(this.suffix, jobIn.suffix) &&
        equalsNullable(this.integrations, jobIn.integrations) &&
        Objects.equals(this.repositories, jobIn.repositories) &&
        Objects.equals(this.autoStart, jobIn.autoStart);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, trainingFiles, hashCodeNullable(validationFiles), hyperparameters, hashCodeNullable(suffix), hashCodeNullable(integrations), repositories, autoStart);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobIn {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    trainingFiles: ").append(toIndentedString(trainingFiles)).append("\n");
    sb.append("    validationFiles: ").append(toIndentedString(validationFiles)).append("\n");
    sb.append("    hyperparameters: ").append(toIndentedString(hyperparameters)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    integrations: ").append(toIndentedString(integrations)).append("\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    autoStart: ").append(toIndentedString(autoStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

